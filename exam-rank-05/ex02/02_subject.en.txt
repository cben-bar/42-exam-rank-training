Assignment name  : cpp_module02
Expected files   : Warlock.cpp Warlock.hpp
                   ASpell.hpp ASpell.cpp
				   ATarget.hpp ATarget.cpp
				   Fwoosh.hpp Fwoosh.cpp
				   Dummy.hpp Dummy.cpp
				   Fireball.hpp Fireball.cpp
				   Polymorph.hpp Polymorph.cpp
				   BrickWall.hpp BrickWall.cpp
				   SpellBook.hpp SpellBook.cpp
				   TargetGenerator.hpp TargetGenerator.cpp
--------------------------------------------------------------------------------

In the Warlock, SpellBook and TargetGenerator classes, the switch statement is
FORBIDDEN and its use would result in a -42.

Create the following two spells, on the same model as Fwoosh:

* Fireball (Name: "Fireball", Effects: "burnt to a crisp")
* Polymorph (Name: "Polymorph", Effects: "turned into a critter")

In addition to this, just so he won't have only dummy to attack, let's make a
new target for him, which will be the BrickWall (Type: "Inconspicuous Red-brick Wall").

Now, make a SpellBook class, in canonical form, that can't be copied or instantiated
by copy. It will have the following functions:

* void learnSpell(ASpell*), that COPIES a spell in the book
* void forgetSpell(string const &), that deletes a spell from the book, except
  if it isn't there
* ASpell* createSpell(string const &), that receives a string corresponding to
  the name of a spell, creates it, and returns it.

Modify the Warlock, now, make it have a spell book that will be created with
him and destroyed with him. Also make his learnSpell and forgetSpell functions
call those of the spell book.

The launchSpell function will have to use the SpellBook to create the spell
it's attempting to launch.

Make a TargetGenerator class, in canonical form, and as before,
non-copyable.

It will have the following functions:

* void learnTargetType(ATarget*), teaches a target to the generator

* void forgetTargetType(string const &), that makes the generator forget a
  target type if it's known

* ATarget* createTarget(string const &), that creates a target of the
  specified type

Phew, that's done. Now here's a test main. It's not very thorough, so make sure 
to use your own aswell.

int main()
{
  Warlock richard("Richard", "foo");
  richard.setTitle("Hello, I'm Richard the Warlock!");
  BrickWall model1;

  Polymorph* polymorph = new Polymorph();
  TargetGenerator tarGen;

  tarGen.learnTargetType(&model1);
  richard.learnSpell(polymorph);

  Fireball* fireball = new Fireball();

  richard.learnSpell(fireball);

  ATarget* wall = tarGen.createTarget("Inconspicuous Red-brick Wall");

  richard.introduce();
  richard.launchSpell("Polymorph", *wall);
  richard.launchSpell("Fireball", *wall);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Hello, I'm Richard the Warlock!!$
Inconspicuous Red-brick Wall has been turned into a critter!$
Inconspicuous Red-brick Wall has been burnt to a crisp!$
Richard: My job here is done!$
~$



Dans les classes Warlock, SpellBook et TargetGenerator, l'instruction switch est
INTERDIT et son utilisation entraînerait un -42.

Créez les deux sorts suivants, sur le même modèle que Fwoosh :

* Boule de feu (Nom : "Boule de feu", Effets : "brûlé en un croustillant")
* Polymorphe (Nom : "Polymorphe", Effets : "transformé en créature")

En plus de cela, juste pour qu'il n'ait pas que des mannequins à attaquer, faisons un
nouvelle cible pour lui, qui sera le BrickWall (Type : "Mur de briques rouges discret").

Maintenant, créez une classe SpellBook, sous forme canonique, qui ne peut pas être copiée ou instanciée
par copie. Il aura les fonctions suivantes :

* void learnSpell(ASpell*), qui COPIE un sort dans le livre
* void forgetSpell(string const &), qui supprime un sort du livre, sauf
   si ce n'est pas là
* ASpell* createSpell(string const &), qui reçoit une chaîne correspondant à
   le nom d'un sort, le crée et le renvoie.

Modifiez le démoniste, maintenant, faites-lui un livre de sorts qui sera créé avec
lui et détruit avec lui. Faites également ses fonctions learnSpell et forgetSpell
appelons ceux du livre de sorts.

La fonction launchSpell devra utiliser le SpellBook pour créer le sort
il tente de se lancer.

Faites une classe TargetGenerator, sous forme canonique, et comme avant,
non copiable.

Il aura les fonctions suivantes :

* void learnTargetType(ATarget*), enseigne une cible au générateur

* void forgetTargetType(string const &), qui fait oublier au générateur un
   type de cible s'il est connu

* ATarget* createTarget(string const &), qui crée une cible du
   type spécifié

Ouf, c'est fait. Voici maintenant un test principal. Ce n'est pas très approfondi, alors assurez-vous
à utiliser également le vôtre.